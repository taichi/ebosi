plugins {
  id 'java'
  
  id 'maven-publish'
  id 'signing'
  id 'de.marcphilipp.nexus-publish' version '0.4.0'
}

group = 'io.gige'
version = "0.5.0-SNAPSHOT"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
  jcenter()
  mavenCentral()
}

java {
  sourceCompatibility = targetCompatibility = JavaVersion.VERSION_14
}

tasks.withType(SourceTask).findAll { it.hasProperty('options') } *.options*.encoding = 'UTF-8'

test {
  systemProperty("java.awt.headless", "true")
//  useJUnitPlatform()
}

dependencies {
  implementation 'org.eclipse.tycho:org.eclipse.jdt.core:3.11.1.v20150902-1521'
  implementation 'org.eclipse.tycho:org.eclipse.jdt.compiler.apt:1.2.0.v20150514-0146'
  implementation 'junit:junit:4.13'

  testImplementation 'org.jmockit:jmockit:1.+'
}

jar.manifest {
  attributes(
    'Implementation-Title' : name,
    'Implementation-Version': version,
    'Implementation-Vendor': 'siden.ninja',
    'Built-JDK': "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
    'Built-Gradle': gradle.gradleVersion
  )
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
  classifier = "javadoc"
  from javadoc
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  publications {
     mavenJava(MavenPublication) {
      from components.java

      artifact sourcesJar
      artifact javadocJar
      
      pom {
        scm {
          def gh = 'https://github.com/taichi/gige'
          url = gh
          connection = "scm:git:${gh}"
          developerConnection = "scm:git:${gh}"
        }
        licenses {
          license {
            name = "The Apache Software License, Version 2.0"
            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution = "repo"
          }
        }
        developers {
          developer {
            id = "taichi"
            name = "Sato Taichi"
            email = "ryushi@gmail.com"
          }
        }
      }
    }
  }
}

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }

  useGpgCmd()
  sign publishing.publications.mavenJava
}

nexusPublishing {
  repositories {
    sonatype {
      username = "your-username"
      password = "your-password"
    }
  }
}

task install {
  dependsOn 'publishToMavenLocal'
}